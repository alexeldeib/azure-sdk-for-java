/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.loganalytics.implementation;

import com.microsoft.azure.loganalytics.OperationalInsightsDataClient;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.RestClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.loganalytics.models.ErrorResponseException;
import com.microsoft.azure.loganalytics.models.QueryBody;
import com.microsoft.azure.loganalytics.models.QueryResults;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the OperationalInsightsDataClient class.
 */
public class OperationalInsightsDataClientImpl extends ServiceClient implements OperationalInsightsDataClient {
    /**
     * The Retrofit service to perform REST calls.
     */
    private OperationalInsightsDataClientService service;

    /**
     * Initializes an instance of OperationalInsightsDataClient client.
     */
    public OperationalInsightsDataClientImpl() {
        this("https://api.loganalytics.io/v1");
    }

    /**
     * Initializes an instance of OperationalInsightsDataClient client.
     *
     * @param baseUrl the base URL of the host
     */
    public OperationalInsightsDataClientImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of OperationalInsightsDataClient client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public OperationalInsightsDataClientImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("https://api.loganalytics.io/v1", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of OperationalInsightsDataClient client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public OperationalInsightsDataClientImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of OperationalInsightsDataClient client.
     *
     * @param restClient the REST client containing pre-configured settings
     */
    public OperationalInsightsDataClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    private void initialize() {
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(OperationalInsightsDataClientService.class);
    }

    /**
     * The interface defining all the services for OperationalInsightsDataClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface OperationalInsightsDataClientService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.loganalytics.OperationalInsightsDataClient query" })
        @POST("workspaces/{workspaceId}/query")
        Observable<Response<ResponseBody>> query(@Path("workspaceId") String workspaceId, @Body QueryBody body);

    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data. [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an Analytics query.
     *
     * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure portal.
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueryResults object if successful.
     */
    public QueryResults query(String workspaceId, QueryBody body) {
        return queryWithServiceResponseAsync(workspaceId, body).toBlocking().single().body();
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data. [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an Analytics query.
     *
     * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure portal.
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<QueryResults> queryAsync(String workspaceId, QueryBody body, final ServiceCallback<QueryResults> serviceCallback) {
        return ServiceFuture.fromResponse(queryWithServiceResponseAsync(workspaceId, body), serviceCallback);
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data. [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an Analytics query.
     *
     * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure portal.
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResults object
     */
    public Observable<QueryResults> queryAsync(String workspaceId, QueryBody body) {
        return queryWithServiceResponseAsync(workspaceId, body).map(new Func1<ServiceResponse<QueryResults>, QueryResults>() {
            @Override
            public QueryResults call(ServiceResponse<QueryResults> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data. [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an Analytics query.
     *
     * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure portal.
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResults object
     */
    public Observable<ServiceResponse<QueryResults>> queryWithServiceResponseAsync(String workspaceId, QueryBody body) {
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.query(workspaceId, body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<QueryResults>>>() {
                @Override
                public Observable<ServiceResponse<QueryResults>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<QueryResults> clientResponse = queryDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<QueryResults> queryDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<QueryResults, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<QueryResults>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
